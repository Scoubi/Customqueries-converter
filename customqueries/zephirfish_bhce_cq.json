[
  {
    "name": "Return All Azure Users that are part of the 'Global Administrator' Role",
    "query": "MATCH p =(n)-[r:AZGlobalAdmin*1..]->(m) RETURN p",
    "description": "Return All Azure Users that are part of the 'Global Administrator' Role"
  },
  {
    "name": "Return All On-Prem users with edges to Azure",
    "query": "MATCH  p=(m:User)-[r:AZResetPassword|AZOwns|AZUserAccessAdministrator|AZContributor|AZAddMembers|AZGlobalAdmin|AZVMContributor|AZOwnsAZAvereContributor]->(n) WHERE m.objectid CONTAINS 'S-1-5-21' RETURN p",
    "description": "Return All On-Prem users with edges to Azure"
  },
  {
    "name": "Find all paths to an Azure VM",
    "query": "MATCH p = (n)-[r]->(g:AZVM) RETURN p",
    "description": "Find all paths to an Azure VM"
  },
  {
    "name": "Find all paths to an Azure KeyVault",
    "query": "MATCH p = (n)-[r]->(g:AZKeyVault) RETURN p",
    "description": "Find all paths to an Azure KeyVault"
  },
  {
    "name": "Return All Azure Users and their Groups (Warning: Heavy)",
    "query": "MATCH p=(m:AZUser)-[r:AZMemberOf*1..]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' RETURN p",
    "description": "Return All Azure Users and their Groups (Warning: Heavy)"
  },
  {
    "name": "Return GUEST Azure Users and their Groups",
    "query": "MATCH p=(m:AZUser)-[r:AZMemberOf*1..]->(n) WHERE NOT m.objectid CONTAINS 'S-1-5' AND m.userprincipalname=~ '(?i).*#EXT#.*' RETURN p",
    "description": "Return GUEST Azure Users and their Groups"
  },
  {
    "name": "Return All Azure Users and their Admin Roles",
    "query": "MATCH p=(n)-[:AZHasRole|AZMemberOf*1..]->(:AZRole) RETURN p",
    "description": "Return All Azure Users and their Admin Roles"
  },
  {
    "name": "Return All Azure Users and their owned Devices (Warning: Heavy)",
    "query": "MATCH p=(d:AZDevice)<-[r1:AZOwns]->(m:AZUser) RETURN p",
    "description": "Return All Azure Users and their owned Devices (Warning: Heavy)"
  },
  {
    "name": "Return All Azure Admins and their owned Devices",
    "query": "MATCH p=(d:AZDevice)<-[r1:AZOwns]->(m:AZUser)<-[r2:AZHasRole]->(n) RETURN p",
    "description": "Return All Azure Admins and their owned Devices"
  },
  {
    "name": "Return All Azure AD Groups that are synchronized with On-Premise AD",
    "query": "MATCH (n:Group) WHERE n.objectid CONTAINS 'S-1-5' AND n.azsyncid IS NOT NULL RETURN n",
    "description": "Return All Azure AD Groups that are synchronized with On-Premise AD"
  },
  {
    "name": "Find all Privileged Service Principals",
    "query": "MATCH p = (g:AZServicePrincipal)-[r]->(n) RETURN p",
    "description": "Find all Privileged Service Principals"
  },
  {
    "name": "Find all Owners of Azure Applications",
    "query": "MATCH p = (n)-[r:AZOwns]->(g:AZApp) RETURN p",
    "description": "Find all Owners of Azure Applications"
  },
  {
    "name": "Find the Shortest path to a high value target from an owned object",
    "query": "MATCH p=shortestPath((g {owned:true})-[*1..]->(n {highvalue:true})) WHERE  g<>n return p",
    "description": "Find the Shortest path to a high value target from an owned object"
  },
  {
    "name": "Find the Shortest path to a unconstrained delegation system from an owned object",
    "query": "MATCH (n) MATCH p=shortestPath((n)-[*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m AND n.owned = true RETURN p",
    "description": "Find the Shortest path to a unconstrained delegation system from an owned object"
  },
  {
    "name": "Find all Certificate Templates",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' RETURN n",
    "description": "Find all Certificate Templates"
  },
  {
    "name": "Find enabled Certificate Templates",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.Enabled = true RETURN n",
    "description": "Find enabled Certificate Templates"
  },
  {
    "name": "Find Certificate Authorities",
    "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' RETURN n",
    "description": "Find Certificate Authorities"
  },
  {
    "name": "Show Enrollment Rights for Certificate Template",
    "query": "MATCH p=(g)-[:Enroll|AutoEnroll]->(n:GPO {name:$result}) WHERE n.type = 'Certificate Template' return p",
    "description": "Show Enrollment Rights for Certificate Template"
  },
  {
    "name": "Show Rights for Certificate Authority",
    "query": "MATCH p=(g)-[:ManageCa|ManageCertificates|Auditor|Operator|Read|Enroll]->(n:GPO {name:$result}) return p",
    "description": "Show Rights for Certificate Authority"
  },
  {
    "name": "Find Misconfigured Certificate Templates (ESC1)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true  RETURN n",
    "description": "Find Misconfigured Certificate Templates (ESC1)"
  },
  {
    "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC1)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enrollee Supplies Subject` = true and n.`Client Authentication` = true and n.`Enabled` = true return p",
    "description": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC1)"
  },
  {
    "name": "Find Misconfigured Certificate Templates (ESC2)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`)  RETURN n",
    "description": "Find Misconfigured Certificate Templates (ESC2)"
  },
  {
    "name": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage`) return p",
    "description": "Shortest Paths to Misconfigured Certificate Templates from Owned Principals (ESC2)"
  },
  {
    "name": "Find Enrollment Agent Templates (ESC3)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`)  RETURN n",
    "description": "Find Enrollment Agent Templates (ESC3)"
  },
  {
    "name": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true and (n.`Extended Key Usage` = [] or 'Any Purpose' IN n.`Extended Key Usage` or 'Certificate Request Agent' IN n.`Extended Key Usage`) return p",
    "description": "Shortest Paths to Enrollment Agent Templates from Owned Principals (ESC3)"
  },
  {
    "name": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)",
    "query": "MATCH p=shortestPath((g)-[:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Certificate Template' and n.`Enabled` = true RETURN p",
    "description": "Shortest Paths to Vulnerable Certificate Template Access Control (ESC4)"
  },
  {
    "name": "Shortest Paths to Vulnerable Certificate Template Access Control from Owned Principals (ESC4)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[r*1..]->(n:GPO)) WHERE g<>n and n.type = 'Certificate Template' and n.Enabled = true and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') return p",
    "description": "Shortest Paths to Vulnerable Certificate Template Access Control from Owned Principals (ESC4)"
  },
  {
    "name": "Find Certificate Authorities with User Specified SAN (ESC6)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`User Specified SAN` = 'Enabled' RETURN n",
    "description": "Find Certificate Authorities with User Specified SAN (ESC6)"
  },
  {
    "name": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)",
    "query": "MATCH p=shortestPath((g)-[r:GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ManageCa|ManageCertificates*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' RETURN p",
    "description": "Shortest Paths to Vulnerable Certificate Authority Access Control (ESC7)"
  },
  {
    "name": "Shortest Paths to Vulnerable Certificate Authority Access Control from Owned Principals (ESC7)",
    "query": "MATCH p=allShortestPaths((g {owned:true})-[*1..]->(n:GPO)) WHERE  g<>n and n.type = 'Enrollment Service' and NONE(x in relationships(p) WHERE type(x) = 'Enroll' or type(x) = 'AutoEnroll') RETURN p",
    "description": "Shortest Paths to Vulnerable Certificate Authority Access Control from Owned Principals (ESC7)"
  },
  {
    "name": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)",
    "query": "MATCH (n:GPO) WHERE n.type = 'Enrollment Service' and n.`Web Enrollment` = 'Enabled' RETURN n",
    "description": "Find Certificate Authorities with HTTP Web Enrollment (ESC8)"
  },
  {
    "name": "Find users with blank passwords that are enabled",
    "query": "MATCH (u:User) WHERE NOT u.userpassword IS null AND u.enabled = TRUE RETURN u.name,u.userpassword",
    "description": "Find users with blank passwords that are enabled"
  },
  {
    "name": "Find users with Temp in user title and created in the last 30 days",
    "query": "MATCH (u:User) where u.enabled=TRUE and u.whencreated  > (datetime().epochseconds - (30 * 86400)) AND u.title CONTAINS 'Temp' RETURN u",
    "description": "Find users with Temp in user title and created in the last 30 days"
  },
  {
    "name": "Find users created in the last 30 days",
    "query": "MATCH (u:User) where u.enabled=TRUE and u.whencreated  > (datetime().epochseconds - (30 * 86400)) RETURN u",
    "description": "Find users created in the last 30 days"
  },
  {
    "name": "Find users' credentials in description fields",
    "query": "MATCH (m:User) WHERE m.description CONTAINS 'password' RETURN m.name, m.description",
    "description": "Find users' credentials in description fields"
  },
  {
    "name": "Find Server 2000 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2000).*' AND H.enabled = TRUE RETURN H",
    "description": "Find Server 2000 and Enabled"
  },
  {
    "name": "Find Server 2000 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2000).*' RETURN H",
    "description": "Find Server 2000 with session"
  },
  {
    "name": "Find Server 2003 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2003).*' AND H.enabled = TRUE RETURN H",
    "description": "Find Server 2003 and Enabled"
  },
  {
    "name": "All computers without LAPS and the computer is enabled",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.haslaps = false AND c.enabled = true RETURN p",
    "description": "All computers without LAPS and the computer is enabled"
  },
  {
    "name": "Find Server 2003 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2003).*' RETURN H",
    "description": "Find Server 2003 with session"
  },
  {
    "name": "Find Server 2008 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2008).*' AND H.enabled = TRUE RETURN H",
    "description": "Find Server 2008 and Enabled"
  },
  {
    "name": "List all owned users",
    "query": "MATCH (m:User) WHERE m.owned=TRUE RETURN m",
    "description": "List all owned users"
  },
  {
    "name": "Kerberoastable Admins",
    "query": "MATCH (n:Group) WHERE n.objectsid =~ $sid WITH n MATCH p=(n)<-[MemberOf*1..]-(m {hasspn: true}) RETURN p",
    "description": "Kerberoastable Admins"
  },
  {
    "name": "All Kerberoastable Users",
    "query": "MATCH (n {hasspn: true}) RETURN n",
    "description": "All Kerberoastable Users"
  },
  {
    "name": "Where can owned users RDP",
    "query": "MATCH p=(m:User {owned: true})-[r:MemberOf|CanRDP*1..]->(n:Computer) RETURN p",
    "description": "Where can owned users RDP"
  },
  {
    "name": "Users with most local admin rights",
    "query": "MATCH (U:User)-[r:MemberOf|AdminTo*1..]->(C:Computer) WITH U.name as n, COUNT(DISTINCT(C)) AS c RETURN n,c ORDER BY c DESC LIMIT 5",
    "description": "Users with most local admin rights"
  },
  {
    "name": "All Owned Nodes",
    "query": "MATCH (n {owned: true}) RETURN n",
    "description": "All Owned Nodes"
  },
  {
    "name": "Find computers with owned Admins",
    "query": "MATCH p=shortestPath((n:User {owned:true})-[r:AdminTo|MemberOf*1..]->(c:Computer)) return p",
    "description": "Find computers with owned Admins"
  },
  {
    "name": "Find owned Groups",
    "query": "MATCH (n:User {owned: true})-[r:MemberOf]->(g:Group) RETURN g",
    "description": "Find owned Groups"
  },
  {
    "name": "Select a domain...",
    "query": "MATCH (n:Group) WHERE n.name =~ $name AND n.owned=true WITH n MATCH p=(n)<-[r:MemberOf*1..]-(m) RETURN p",
    "description": "Find owned Domain Admins"
  },
  {
    "name": "Find Shortest Path from owned Node to Domain Admin",
    "query": "MATCH (n:User),(m:Group {name:$result}),p=shortestPath((n {owned:true})-[r:MemberOf|AdminTo|HasSession|Contains|GpLink|Owns|DCSync|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner*1..]->(m)) RETURN p",
    "description": "Find Shortest Path from owned Node to Domain Admin"
  },
  {
    "name": "Shortest paths from owned objects to High Value Targets (5 hops)",
    "query": "MATCH p=shortestPath((n {owned:true})-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|CanRDP|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
    "description": "Shortest paths from owned objects to High Value Targets (5 hops)"
  },
  {
    "name": "Most exploitable paths from owned objects to High Value Targets (5 hops)",
    "query": "MATCH p=allShortestPaths((n {owned:true})-[:MemberOf|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory*1..5]->(m {highvalue:true})) WHERE NOT n=m RETURN p",
    "description": "Most exploitable paths from owned objects to High Value Targets (5 hops)"
  },
  {
    "name": "Next steps (5 hops) from owned objects",
    "query": "MATCH p=shortestPath((c {owned: true})-[*1..5]->(s)) WHERE NOT c = s RETURN p",
    "description": "Next steps (5 hops) from owned objects"
  },
  {
    "name": "Unconstrained Delegation systems",
    "query": "MATCH (c {unconstraineddelegation:true}) return c",
    "description": "Unconstrained Delegation systems"
  },
  {
    "name": "Constrained Delegation systems",
    "query": "MATCH p=(u)-[:AllowedToDelegate]->(c) RETURN p",
    "description": "Constrained Delegation systems"
  },
  {
    "name": "Unconstrained Delegation systems (without domain controllers)",
    "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
    "description": "Unconstrained Delegation systems (without domain controllers)"
  },
  {
    "name": "(Warning: edits the DB) Mark unconstrained delegation systems as high value targets",
    "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2 {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers SET c2.highvalue = true RETURN c2",
    "description": "(Warning: edits the DB) Mark unconstrained delegation systems as high value targets"
  },
  {
    "name": "Shortest paths from owned principals to unconstrained delegation systems",
    "query": "MATCH (n {owned:true}) MATCH p=shortestPath((n)-[:MemberOf|HasSession|AdminTo|AllExtendedRights|AddMember|ForceChangePassword|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|ExecuteDCOM|AllowedToDelegate|ReadLAPSPassword|Contains|GpLink|AddAllowedToAct|AllowedToAct|SQLAdmin|ReadGMSAPassword|HasSIDHistory|CanPSRemote*1..]->(m:Computer {unconstraineddelegation: true})) WHERE NOT n=m RETURN p",
    "description": "Shortest paths from owned principals to unconstrained delegation systems"
  },
  {
    "name": "Users with adminCount, not sensitive for delegation, not members of Protected Users",
    "query": "MATCH (u)-[:MemberOf*1..]->(g:Group) WHERE g.objectid =~ \"(?i)S-1-5-.*-525\" WITH COLLECT (u.name) as protectedUsers MATCH p=(u2:User)-[:MemberOf*1..3]->(g2:Group) WHERE u2.admincount=true AND u2.sensitive=false AND NOT u2.name IN protectedUsers RETURN p",
    "description": "Users with adminCount, not sensitive for delegation, not members of Protected Users"
  },
  {
    "name": "Groups that contain the word 'admin'",
    "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n",
    "description": "Groups that contain the word 'admin'"
  },
  {
    "name": "Find users that can RDP into something",
    "query": "match (u1:User) WHERE u1.plaintext=True MATCH p1=(u1)-[:CanRDP*1..]->(c:Computer) RETURN u1",
    "description": "Find users that can RDP into something"
  },
  {
    "name": "Find users that belong to high value groups",
    "query": "match (u1:User) WHERE u1.plaintext=True MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
    "description": "Find users that belong to high value groups"
  },
  {
    "name": "Find kerberoastable users",
    "query": "match (u1:User) WHERE u1.plaintext=True AND u1.hasspn=True RETURN u1",
    "description": "Find kerberoastable users"
  },
  {
    "name": "Return users with seasons in their password and are high value targets",
    "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
    "description": "Return users with seasons in their password and are high value targets"
  },
  {
    "name": "Return users with seasons in their password and have local admin on at least one computer",
    "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
    "description": "Return users with seasons in their password and have local admin on at least one computer"
  },
  {
    "name": "Return users with seasons in their password and a path to high value targets (limit to 25 results)",
    "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"([Ww]inter.*|[sS]pring.*|[sS]ummer.*|[fF]all.*)\" MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
    "description": "Return users with seasons in their password and a path to high value targets (limit to 25 results)"
  },
  {
    "name": "Return users with a variant of \"password\" in their password and are high value targets",
    "query": "MATCH (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" MATCH p=(u1:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN u1",
    "description": "Return users with a variant of \"password\" in their password and are high value targets"
  },
  {
    "name": "Return users with a variant of \"password\" in their password and have local admin on at least one computer",
    "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\" match p=(u1:User)-[r:AdminTo]->(n:Computer) RETURN p",
    "description": "Return users with a variant of \"password\" in their password and have local admin on at least one computer"
  },
  {
    "name": "Return users with a variant of \"password\" in their password and a path to high value targets (limit to 25 results)",
    "query": "match (u1:User) WHERE u1.plaintextpassword =~ \"(.*[pP][aA@][sS$][sS$][wW][oO0][rR][dD].*)\"  MATCH p=shortestPath((u1:User)-[*1..]->(n {highvalue:true})) WHERE  u1<>n return u1 LIMIT 25",
    "description": "Return users with a variant of \"password\" in their password and a path to high value targets (limit to 25 results)"
  },
  {
    "name": "Groups of High Value Targets",
    "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p",
    "description": "Groups of High Value Targets"
  },
  {
    "name": "Non Admin Groups with High Value Privileges",
    "query": "MATCH p=(g:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer)  WHERE NOT g.name CONTAINS 'ADMIN' RETURN p",
    "description": "Non Admin Groups with High Value Privileges"
  },
  {
    "name": "Groups with Computer and User Objects",
    "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers",
    "description": "Groups with Computer and User Objects"
  },
  {
    "name": "Groups that can reset passwords (Warning: Heavy)",
    "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p",
    "description": "Groups that can reset passwords (Warning: Heavy)"
  },
  {
    "name": "Groups that have local admin rights (Warning: Heavy)",
    "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p",
    "description": "Groups that have local admin rights (Warning: Heavy)"
  },
  {
    "name": "Users never logged on and account still active",
    "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n ",
    "description": "Users never logged on and account still active"
  },
  {
    "name": "Users logged in the last 90 days",
    "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u",
    "description": "Users logged in the last 90 days"
  },
  {
    "name": "Users with passwords last set in the last 90 days",
    "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "description": "Users with passwords last set in the last 90 days"
  },
  {
    "name": "Find if unprivileged users have rights to add members into groups",
    "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p",
    "description": "Find if unprivileged users have rights to add members into groups"
  },
  {
    "name": "Find all users a part of the VPN group",
    "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p",
    "description": "Find all users a part of the VPN group"
  },
  {
    "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
    "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c",
    "description": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate"
  },
  {
    "name": "Next steps (3 hops) from owned objects",
    "query": "MATCH p=shortestPath((c {owned: true})-[*1..3]->(s)) WHERE NOT c = s RETURN p",
    "description": "Next steps (3 hops) from owned objects"
  },
  {
    "name": "Owned users with permissions against GPOs",
    "query": "MATCH p=(u:User {owned:true})-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p",
    "description": "Owned users with permissions against GPOs"
  },
  {
    "name": "Find all other Rights Domain Users shouldn't have",
    "query": "MATCH p=(m:Group)-[r:Owns|WriteDacl|GenericAll|WriteOwner|ExecuteDCOM|GenericWrite|AllowedToDelegate|ForceChangePassword]->(n:Computer) WHERE m.objectid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p",
    "description": "Find all other Rights Domain Users shouldn't have"
  },
  {
    "name": "Computers with administrative Domain Users",
    "query": "MATCH p=(m:Group)-[r:AddMember|AdminTo|AllExtendedRights|AllowedToDelegate|CanRDP|Contains|ExecuteDCOM|ForceChangePassword|GenericAll|GenericWrite|GetChanges|GetChangesAll|HasSession|Owns|ReadLAPSPassword|SQLAdmin|TrustedBy|WriteDACL|WriteOwner|AddAllowedToAct|AllowedToAct]->(t) WHERE m.objectsid ENDS WITH '-513' OR m.objectsid ENDS WITH '-515' OR m.objectsid ENDS WITH 'S-1-5-11' OR m.objectsid ENDS WITH 'S-1-1-0' RETURN p",
    "description": "Computers with administrative Domain Users"
  },
  {
    "name": "List all owned computers",
    "query": "MATCH (m:Computer) WHERE m.owned=TRUE RETURN m",
    "description": "List all owned computers"
  },
  {
    "name": "List all owned groups",
    "query": "MATCH (m:Group) WHERE m.owned=TRUE RETURN m",
    "description": "List all owned groups"
  },
  {
    "name": "List all High Valued Targets",
    "query": "MATCH (m) WHERE m.highvalue=TRUE RETURN m",
    "description": "List all High Valued Targets"
  },
  {
    "name": "List the groups of all owned users",
    "query": "MATCH (m:User) WHERE m.owned=TRUE WITH m MATCH p=(m)-[:MemberOf*1..]->(n:Group) RETURN p",
    "description": "List the groups of all owned users"
  },
  {
    "name": "Find all Kerberoastable Users",
    "query": "MATCH (n:User)WHERE n.hasspn=true RETURN n",
    "description": "Find all Kerberoastable Users"
  },
  {
    "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago",
    "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) AND NOT u.pwdlastset IN [-1.0, 0.0] RETURN u.name, u.pwdlastset order by u.pwdlastset ",
    "description": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set less than 5 years ago"
  },
  {
    "name": "Find Kerberoastable Users with a path to DA",
    "query": "MATCH (u:User {hasspn:true}) MATCH (g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = shortestPath( (u)-[*1..]->(g) ) RETURN p",
    "description": "Find Kerberoastable Users with a path to DA"
  },
  {
    "name": "Find machines Domain Users can RDP into",
    "query": "match p=(g:Group)-[:CanRDP]->(c:Computer) where g.objectid ENDS WITH '-513' return p",
    "description": "Find machines Domain Users can RDP into"
  },
  {
    "name": "Find what groups can RDP",
    "query": "MATCH p=(m:Group)-[r:CanRDP]->(n:Computer) RETURN p",
    "description": "Find what groups can RDP"
  },
  {
    "name": "Find groups that can reset passwords (Warning: Heavy)",
    "query": "MATCH p=(m:Group)-[r:ForceChangePassword]->(n:User) RETURN p",
    "description": "Find groups that can reset passwords (Warning: Heavy)"
  },
  {
    "name": "Find groups that have local admin rights (Warning: Heavy)",
    "query": "MATCH p=(m:Group)-[r:AdminTo]->(n:Computer) RETURN p",
    "description": "Find groups that have local admin rights (Warning: Heavy)"
  },
  {
    "name": "Find all users that have local admin rights (Warning Can Be Heavy)",
    "query": "MATCH p=(m:User)-[r:AdminTo]->(n:Computer) RETURN p",
    "description": "Find all users that have local admin rights (Warning Can Be Heavy)"
  },
  {
    "name": "Find all users that have local admin rights or Groups (Warning Can Be Heavy)",
    "query": "MATCH p=(m:User)-[r:AdminTo|MemberOf*1..]->(n:Computer) RETURN p",
    "description": "Find all users that have local admin rights or Groups (Warning Can Be Heavy)"
  },
  {
    "name": "Find all active Domain Admin sessions",
    "query": "MATCH (n:User)-[:MemberOf]->(g:Group) WHERE g.objectid ENDS WITH '-512' MATCH p = (c:Computer)-[:HasSession]->(n) return p",
    "description": "Find all active Domain Admin sessions"
  },
  {
    "name": "Find all computers with Unconstrained Delegation",
    "query": "MATCH (c:Computer {unconstraineddelegation:true}) return c",
    "description": "Find all computers with Unconstrained Delegation"
  },
  {
    "name": "Find all computers with unsupported operating systems",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem = '.*(2000|2003|2008|xp|vista|7|me).*' AND H.enabled = TRUE RETURN H",
    "description": "Find all computers with unsupported operating systems"
  },
  {
    "name": "Find users that logged in within the last 90 days",
    "query": "MATCH (u:User) WHERE u.lastlogon < (datetime().epochseconds - (90 * 86400)) and NOT u.lastlogon IN [-1.0, 0.0] RETURN u",
    "description": "Find users that logged in within the last 90 days"
  },
  {
    "name": "Find users with passwords last set within the last 90 days",
    "query": "MATCH (u:User) WHERE u.pwdlastset < (datetime().epochseconds - (90 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "description": "Find users with passwords last set within the last 90 days"
  },
  {
    "name": "Find constrained delegation",
    "query": "MATCH p=(u:User)-[:AllowedToDelegate]->(c:Computer) RETURN p",
    "description": "Find constrained delegation"
  },
  {
    "name": "Find computers that allow unconstrained delegation that AREN’T domain controllers.",
    "query": "MATCH (c1:Computer)-[:MemberOf*1..]->(g:Group) WHERE g.objectid ENDS WITH '-516' WITH COLLECT(c1.name) AS domainControllers MATCH (c2:Computer {unconstraineddelegation:true}) WHERE NOT c2.name IN domainControllers RETURN c2",
    "description": "Find computers that allow unconstrained delegation that AREN’T domain controllers."
  },
  {
    "name": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'",
    "query": "MATCH (c:Computer) WHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') RETURN c",
    "description": " Return the name of every computer in the database where at least one SPN for the computer contains the string 'MSSQL'"
  },
  {
    "name": "View all GPOs",
    "query": "Match (n:GPO) RETURN n",
    "description": "View all GPOs"
  },
  {
    "name": "View all groups that contain the word 'admin'",
    "query": "Match (n:Group) WHERE n.name CONTAINS 'ADMIN' RETURN n",
    "description": "View all groups that contain the word 'admin'"
  },
  {
    "name": "Find users that can be AS-REP roasted",
    "query": "MATCH (u:User {dontreqpreauth: true}) RETURN u",
    "description": "Find users that can be AS-REP roasted"
  },
  {
    "name": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago",
    "query": "MATCH (u:User) WHERE u.hasspn=true AND u.pwdlastset < (datetime().epochseconds - (1825 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "description": "Find All Users with an SPN/Find all Kerberoastable Users with passwords last set > 5 years ago"
  },
  {
    "name": "Show all high value target's groups",
    "query": "MATCH p=(n:User)-[r:MemberOf*1..]->(m:Group {highvalue:true}) RETURN p",
    "description": "Show all high value target's groups"
  },
  {
    "name": "Find groups that contain both users and computers",
    "query": "MATCH (c:Computer)-[r:MemberOf*1..]->(groupsWithComps:Group) WITH groupsWithComps MATCH (u:User)-[r:MemberOf*1..]->(groupsWithComps) RETURN DISTINCT(groupsWithComps) as groupsWithCompsAndUsers",
    "description": "Find groups that contain both users and computers"
  },
  {
    "name": "Find Kerberoastable users who are members of high value groups",
    "query": "MATCH (u:User)-[r:MemberOf*1..]->(g:Group) WHERE g.highvalue=true AND u.hasspn=true RETURN u",
    "description": "Find Kerberoastable users who are members of high value groups"
  },
  {
    "name": "Find Kerberoastable users and where they are AdminTo",
    "query": "OPTIONAL MATCH (u1:User) WHERE u1.hasspn=true OPTIONAL MATCH (u1)-[r:AdminTo]->(c:Computer) RETURN u1",
    "description": "Find Kerberoastable users and where they are AdminTo"
  },
  {
    "name": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate",
    "query": "MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c",
    "description": "Find computers with constrained delegation permissions and the corresponding targets where they allowed to delegate"
  },
  {
    "name": "Find Users/Groups with direct access to GPOs",
    "query": "MATCH p = (n)-[r:AddMember|AddSelf|WriteSPN|AddKeyCredentialLink|AllExtendedRights|ForceChangePassword|GenericAll|GenericWrite|WriteDacl|WriteOwner|Owns]->(g:GPO) RETURN p",
    "description": "Find Users/Groups with direct access to GPOs"
  },
  {
    "name": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)",
    "query": "MATCH p=(u:User)-[r:AllExtendedRights|GenericAll|GenericWrite|Owns|WriteDacl|WriteOwner|GpLink*1..]->(g:GPO) RETURN p",
    "description": "Find if any domain user has interesting permissions against a GPO (Warning: Heavy)"
  },
  {
    "name": "Find if unprivileged users have rights to add members into groups",
    "query": "MATCH (n:User {admincount:False}) MATCH p=allShortestPaths((n)-[r:AddMember*1..]->(m:Group)) RETURN p",
    "description": "Find if unprivileged users have rights to add members into groups"
  },
  {
    "name": "Find all users a part of the VPN group",
    "query": "Match p=(u:User)-[:MemberOf]->(g:Group) WHERE toUPPER (g.name) CONTAINS 'VPN' return p",
    "description": "Find all users a part of the VPN group"
  },
  {
    "name": "Find users that have never logged on and account is still active",
    "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n ",
    "description": "Find users that have never logged on and account is still active"
  },
  {
    "name": "Find an object in one domain that can do something to a foreign object",
    "query": "MATCH p=(n)-[r]->(m) WHERE NOT n.domain = m.domain RETURN p",
    "description": "Find an object in one domain that can do something to a foreign object"
  },
  {
    "name": "Find all sessions a user in a specific domain has",
    "query": "MATCH p=(m:Computer)-[r:HasSession]->(n:User {domain:$result}) RETURN p",
    "description": "Find all sessions a user in a specific domain has"
  },
  {
    "name": "Find an object from domain 'A' that can do anything to a foreign object",
    "query": "MATCH p=(n {domain:$result})-[r]->(d) WHERE NOT d.domain=n.domain RETURN p",
    "description": "Find an object from domain 'A' that can do anything to a foreign object"
  },
  {
    "name": "Find All edges any owned user has on a computer",
    "query": "MATCH p=shortestPath((m:User)-[r*]->(b:Computer)) WHERE m.owned RETURN p",
    "description": "Find All edges any owned user has on a computer"
  },
  {
    "name": "Find Un-Supported OS and Enabled",
    "query": "MATCH (n:Computer) WHERE n.operatingsystem =~ '(?i).*(2000|2003|2008|xp|vista|7|me).*' AND n.enabled = true RETURN n",
    "description": "Find Un-Supported OS and Enabled"
  },
  {
    "name": "Find Server 2008 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2008).*' RETURN H",
    "description": "Find Server 2008 with session"
  },
  {
    "name": "Find Windows XP and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(xp).*' AND H.enabled = true RETURN H",
    "description": "Find Windows XP and Enabled"
  },
  {
    "name": "Find Windows XP with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(xp).*' RETURN H",
    "description": "Find Windows XP with session"
  },
  {
    "name": "Find Windows 7 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(7).*' AND H.enabled = true RETURN H",
    "description": "Find Windows 7 and Enabled"
  },
  {
    "name": "Find Windows 7 session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(7).*' RETURN H",
    "description": "Find Windows 7 session"
  },
  {
    "name": "Find Server 2012 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2012).*' AND H.enabled = true RETURN H",
    "description": "Find Server 2012 and Enabled"
  },
  {
    "name": "Find Server 2012 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2012).*' RETURN H",
    "description": "Find Server 2012 with session"
  },
  {
    "name": "Find Server 2016 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2016).*' AND H.enabled = true RETURN H",
    "description": "Find Server 2016 and Enabled"
  },
  {
    "name": "Find Server 2016 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2016).*' RETURN H",
    "description": "Find Server 2016 with session"
  },
  {
    "name": "Find Server 2019 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2019).*' AND H.enabled = true RETURN H",
    "description": "Find Server 2019 and Enabled"
  },
  {
    "name": "Find Server 2019 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2019).*' RETURN H",
    "description": "Find Server 2019 with session"
  },
  {
    "name": "Find Server 2022 and Enabled",
    "query": "MATCH (H:Computer) WHERE H.operatingsystem =~ '(?i).*(2022).*' AND H.enabled = true RETURN H",
    "description": "Find Server 2022 and Enabled"
  },
  {
    "name": "Find Server 2022 with session",
    "query": "MATCH (H:Computer)-[:HasSession]->(y) WHERE H.operatingsystem =~ '(?i).*(2022).*' RETURN H",
    "description": "Find Server 2022 with session"
  },
  {
    "name": "All Users with a homedirectory",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.homedirectory =~ '(?i).*.*' RETURN p",
    "description": "All Users with a homedirectory"
  },
  {
    "name": "All Computers without LAPS - with session",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer)-[:HasSession]->(y) WHERE c.haslaps = false RETURN p",
    "description": "All Computers without LAPS - with session"
  },
  {
    "name": "All computers without LAPS and the computer is enabled",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.haslaps = false AND c.enabled = true RETURN p",
    "description": "All computers without LAPS and the computer is enabled"
  },
  {
    "name": "All enabled computers with a description",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*.*' RETURN p",
    "description": "All enabled computers with a description"
  },
  {
    "name": "All enabled computers with a description containing the word file",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(c:Computer) WHERE c.description =~ '(?i).*file.*' RETURN p",
    "description": "All enabled computers with a description containing the word file"
  },
  {
    "name": "Locate enabled accounts with display name of admin - put anyname in you like",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.displayname =~ '(?i).*admin*' AND u.enabled = true RETURN p",
    "description": "Locate enabled accounts with display name of admin - put anyname in you like"
  },
  {
    "name": "Find all users with passwords set over 720 days ago (23 months)",
    "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (720 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "description": "Find all users with passwords set over 720 days ago (23 months)"
  },
  {
    "name": "Find all users with passwords set over 1440 days ago (47 months)",
    "query": "MATCH (u:User) WHERE u.enabled=true AND u.pwdlastset < (datetime().epochseconds - (1440 * 86400)) and NOT u.pwdlastset IN [-1.0, 0.0] RETURN u",
    "description": "Find all users with passwords set over 1440 days ago (47 months)"
  },
  {
    "name": "Find all Domain Admins (nested SID S-1-5-21-.*-512) having a session opened on a domain computer",
    "query": "MATCH (m:User)-[r:MemberOf*1..]->(n:Group) WHERE n.objectid =~ '(?i)S-1-5-.*-512' WITH m MATCH q=((m)<-[:HasSession]-(o:Computer)) RETURN q",
    "description": "Find all Domain Admins (nested SID S-1-5-21-.*-512) having a session opened on a domain computer"
  },
  {
    "name": "Find users that have never logged on and account is still active",
    "query": "MATCH (n:User) WHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE RETURN n ",
    "description": "Find users that have never logged on and account is still active"
  },
  {
    "name": "Find users that haven't logged on in 720 days and account is still active",
    "query": "MATCH (n:User) WHERE n.lastlogontimestamp < (datetime().epochseconds - (720 * 86400)) AND n.enabled=TRUE RETURN n ",
    "description": "Find users that haven't logged on in 720 days and account is still active"
  },
  {
    "name": "Search for key words in users title such as scientist or Executive - tweak as required",
    "query": "MATCH p = (d:Domain)-[r:Contains*1..]->(u:User) WHERE u.title =~ '(?i).*scientist*' AND u.enabled = true RETURN p",
    "description": "Search for key words in users title such as scientist or Executive - tweak as required"
  }
]
